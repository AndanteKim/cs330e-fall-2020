----
Generators:
----------
yield:
------
Yield:
e.g., 1
>>>def f() :
>>>    print("abc")
>>>    return 5
>>>    print ("def") # it does not make sense to have code 
                     # after return unless there is a condition before return.

>>>v = f()
abc
>>>print(v)
5
-------------------------------
e.g., 2
>>>def f() :
>>>    print("abc")
>>>    yield 5
>>>    print("def")
>>>    yield 6

>>>v = f()
>>>print(v)
<generator object f at 0x0096E8A0>
>>>print(hasattr(v, "__next__"))
True
>>>w = next(v)
abc
>>>print(w)
5
>>>w = next(v) # function starts running from where it left off
def
>>>print(w)
6
>>> w = next(v) # raises an exception
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>print(w)
6
------------------------------------------

>>>def f () :
>>>	print("abc")
>>>	yield 5
>>>	print("def")
>>>	yield 6
>>>	print("ghi")

>>>v = f()     # <nothing>
>>>print(v)    
<generator object f at .....>
>>>w = next(v) 
abc
>>>print(w)    
5
>>>x = next(v) 
def
>>>print(x)   
6
>>>y = next(v) 
ghi 
raise StopIteration
---------

Example of a Generator
# f.py
def yrange(n):
	i = 0
	while i < n :
		yield i
		i += 1
		
>>> from f import yrange
>>> yrange(3)
<generator object yrange at 0x01ABEA80>
>>> list(yrange(3))
[0, 1, 2]
>>>


map function:
------------
map(function_to_apply, list_of_inputs)

Example
>>> items = [1, 2, 3, 4, 5]
>>> squared = list(map(lambda x: x**2, items))
>>> squared
[1, 4, 9, 16, 25]
>>>


Comprehensions.py
-----------------
filter(predicate, list_of_inputs)
filter is a generator takes a predicate, it applies the predicate 
on the given iterable returns the element that satisfies the predicate.
It's an iterator, i.e., it returns itself.


"|=" union of sets

Lines 174: all() # all(iterable): Return True if all elements of the iterable are true (or if the iterable is empty).
A(): instance of a class
True
...
all([]) = True

Lines 186: any() # any(iterable): Return True if any element of the iterable is true. If the iterable is empty, return False.
any([]) = False
https://docs.python.org/3.5/library/functions.html#all

FunctionKeywords.py
Note 1: the specified "by name" arguments should have corresponds with the names 
in the function signature as parameters.
Note 2: In the functional call, when you mix "by position" and "by name" arguments, 
arguments passed "by position" should come first. 
Then the remainder by name (the order of the arguments passed by name does not matter)

